CLASS lhc_plist DEFINITION INHERITING FROM cl_abap_behavior_handler.
  PRIVATE SECTION.

    METHODS get_instance_features FOR INSTANCE FEATURES
      IMPORTING keys REQUEST requested_features FOR plist RESULT result.

    METHODS get_instance_authorizations FOR INSTANCE AUTHORIZATION
      IMPORTING keys REQUEST requested_authorizations FOR plist RESULT result.

    METHODS earlynumbering_create FOR NUMBERING
      IMPORTING entities FOR CREATE plist.

    METHODS setstatuscomplete FOR MODIFY
      IMPORTING keys FOR ACTION plist~setstatuscomplete RESULT result.

    METHODS setinitialstatus FOR DETERMINE ON MODIFY
      IMPORTING keys FOR plist~setinitialstatus.

    METHODS validateplate FOR VALIDATE ON SAVE
      IMPORTING keys FOR plist~validateplate.
    METHODS populatevehicledetails FOR DETERMINE ON MODIFY
      IMPORTING keys FOR plist~populatevehicledetails.

ENDCLASS.

CLASS lhc_plist IMPLEMENTATION.

  METHOD get_instance_features.
  ENDMETHOD.

  METHOD get_instance_authorizations.
  ENDMETHOD.

  METHOD earlynumbering_create.
    DATA(lt_entities) = entities.
    SELECT MAX(  plist ) FROM zpl_tab_head INTO @DATA(lv_max_plist).
*    SELECT max(  plist ) FROM zpl_tab_head_d into @DATA(lv_max_plist_d).
*    if lv_max_plist_d gt lv_max_plist.
*        lv_max_plist = lv_max_plist_d.
*    endif.

    LOOP AT lt_entities INTO DATA(ls_entity).
      IF ls_entity-plist IS INITIAL.
        lv_max_plist = lv_max_plist + 1.
        ls_entity-plist = |{ lv_max_plist ALPHA = IN }|.
      ENDIF.

      APPEND VALUE #( %cid = ls_entity-%cid
*        %is_draft = ls_entity-%is_draft
      plist = ls_entity-plist ) TO mapped-plist.
    ENDLOOP.
  ENDMETHOD.

  METHOD setstatuscomplete.
    MODIFY ENTITIES OF zi_pl_head_tp IN LOCAL MODE
    ENTITY plist
       UPDATE
         FIELDS ( status )
         WITH VALUE #( FOR key IN keys
                         ( %tky         = key-%tky
                           status = key-%param-status ) )
    FAILED failed
    REPORTED reported.

*   Read the changed values and update result
    READ ENTITIES OF zi_pl_head_tp IN LOCAL MODE
      ENTITY plist
        ALL FIELDS WITH CORRESPONDING #( keys )
      RESULT DATA(lt_plist).

    result = VALUE #( FOR ls_plist IN lt_plist
                        ( %tky   = ls_plist-%tky
                          %param = ls_plist ) ).
  ENDMETHOD.

  METHOD setinitialstatus.
    READ ENTITIES OF zi_pl_head_tp IN LOCAL MODE
       ENTITY plist FIELDS ( status ) WITH CORRESPONDING #( keys )
       RESULT DATA(lt_plist).

    DELETE lt_plist WHERE status IS  NOT INITIAL.
    CHECK lt_plist IS NOT INITIAL.

    MODIFY ENTITIES OF zi_pl_head_tp IN LOCAL MODE
        ENTITY plist UPDATE FIELDS ( status )
        WITH VALUE #( FOR ls_plist IN lt_plist
                    ( %tky      = ls_plist-%tky
                      status    = 'Created' ) )
        REPORTED DATA(update_reported).

    reported = CORRESPONDING #( DEEP update_reported ).
  ENDMETHOD.

  METHOD validateplate.
    READ ENTITIES OF zi_pl_head_tp IN LOCAL MODE
    ENTITY plist
    FIELDS ( plateno )
    WITH CORRESPONDING #( keys )
    RESULT DATA(lt_plist).


    LOOP AT lt_plist INTO DATA(ls_plist) WHERE plateno IS NOT INITIAL.
      SELECT SINGLE @abap_true FROM zpl_tab_head WHERE plate_no = @ls_plist-plateno INTO @DATA(lv_plate_exists).

      IF lv_plate_exists = abap_true.
*       Updated failed data
        APPEND VALUE #( %tky = ls_plist-%tky ) TO failed-plist.
*       Update message for the failed data
        APPEND VALUE #( %tky = keys[ 1 ]-%tky
                        %msg = new_message_with_text(
                        severity = if_abap_behv_message=>severity-error
                        text = 'Plate Number Exists') ) TO reported-plist.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.

  METHOD populatevehicledetails.
    READ ENTITIES OF zi_pl_head_tp IN LOCAL MODE
        ENTITY plist FIELDS ( plateno ) WITH CORRESPONDING #( keys )
        RESULT DATA(lt_plist).

    DELETE lt_plist WHERE plateno IS INITIAL.
    CHECK lt_plist IS NOT INITIAL.

    SELECT * FROM zi_resid_vehicle INTO TABLE @DATA(lt_vehicle)
             FOR ALL ENTRIES IN @lt_plist WHERE plateno = @lt_plist-plateno.

    MODIFY ENTITIES OF zi_pl_head_tp IN LOCAL MODE
        ENTITY plist UPDATE FIELDS ( owner actconfig )
        WITH VALUE #( FOR ls_plist IN lt_plist
                    LET ls_vehicle = VALUE #( lt_vehicle[ plateno = ls_plist-plateno ] OPTIONAL )
                    IN  owner = ls_vehicle-owner actconfig = ls_vehicle-actconfig
                    ( %tky      = ls_plist-%tky ) )
        REPORTED DATA(update_reported).

    reported = CORRESPONDING #( DEEP update_reported ).

  ENDMETHOD.

ENDCLASS.